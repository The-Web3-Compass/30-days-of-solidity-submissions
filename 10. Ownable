// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Ownable {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(msg.sender);
    }

    modifier onlyOwner() {
        require(owner() == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    function owner() public view returns (address) {
        return _owner;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract VaultMaster is Ownable {
    event Deposit(address indexed sender, uint256 amount);
    event Withdraw(address indexed owner, uint256 amount);

    function deposit() external payable {
        require(msg.value > 0, "Vault: must deposit more than 0");
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) external onlyOwner {
        require(amount <= address(this).balance, "Vault: insufficient balance");
        payable(owner()).transfer(amount);
        emit Withdraw(owner(), amount);
    }

    function getBalance() external view returns (uint256) {
        return address(this).balance;
    }
}
