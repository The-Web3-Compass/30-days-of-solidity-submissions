// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
}

contract MyFirstToken is IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    string public name;
    string public symbol;
    uint public initial_Supply;

    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowances;

    constructor() {
        name = "MyFirstToken";
        symbol = "MT";
        initial_Supply = 1000;
        balances[msg.sender] = initial_Supply; // Assign all tokens to deployer
        emit Transfer(address(0), msg.sender, initial_Supply);
    }

    function totalSupply() external view returns (uint256) {
        return initial_Supply;
    }

    function balanceOf(address account) external view returns (uint256) {
        return balances[account];
    }

    function mint(uint amount) public {
        balances[msg.sender] += amount;
        initial_Supply += amount;
        emit Transfer(address(0), msg.sender, amount);
    }

    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool) {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        balances[recipient] += amount;
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256) {
        allowances[owner][spender];
        return allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool) {
        require(balances[sender] >= amount, "Insufficient balance");
        require(allowances[sender][msg.sender] >= amount, "Allowance exceeded");

        balances[sender] -= amount;
        balances[recipient] += amount;
        allowances[sender][msg.sender] -= amount;

        emit Transfer(sender, recipient, amount);
        return true;
    }

    function burn(uint amount) public {
        require(balances[msg.sender] >= amount, "Not enough tokens to burn");
        balances[msg.sender] -= amount;
        initial_Supply -= amount;
        emit Transfer(msg.sender, address(0), amount);
    }
}
