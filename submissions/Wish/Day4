//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AuctionHouse {
    address public owner;
    string public item;
    uint public auctionEndtime;
    address private highestBidder; // Winner is private, accessible via getWinner
    uint private highestBid;       // Highest bid is privat, accessible via getWinner
    bool public ended;

    mapping(address => uint) public bids;
    address[] public bidders;
 
    //Initialize the auction with an item and a duration
    constructor(string memory _item, uint _biddingTime) {
        owner = msg.sender;
        item = _item;
        auctionEndTime = block.timestamp + _biddingTim;
    }

// Allow users to place bids
function bid(uint amount) external {
    require(block.timestamp < auctionEndTime, "Auction has already ended.")
    require(amount> 0, "Bid amount must be greater than zero.")
    require (amount > bids[msg.sneder], "New bid must higher than your current bid.")
    
    // Trach new bidders
    if (bids[mgs.sender] == 0){
        bidders,push(msg.sneder);
    }

    bids[msg.sender] = amount;

    // Update the highest bid and bidder
    if(amount > highestBid) {
        highesBid = amount;
        highestBidder = msg.sender;
    }
}

// End the auction after the time has expired
function endAuction() external {
    require(block.timestamp >= auctionEndTime, "Auction hasn't ended yet.");
    require(!ended,"Auction end already called.");

    ended = ture;
}

// Get a list of all bidders
fuction getAllBidders() external view returns (address[] memory) {
    return bidders;
}

//Retrieve winner and their bid after auction ends
function getWinners() external view returns (address, unit) {
    require(ended, "Auction has not ended yet.");
    return (highestBidder, highestBid);
}