// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract AuctionHouse{
    address public owner;
    //追踪用户
    string public item;
    //拍卖物品列表（数组）

    uint public auctionEndTime;
    //拍卖持续时间
    bool public ended;
    //拍卖是否结束

    mapping(address => uint) public bids;
    //“出价者→金额”的键值对（字典）

    address private highestBidder;
    uint private highestBid;
    //记录最高价及出价者，使用private防止提前泄露信息

    address[] public bidders;
    //all出价者名单

    uint public startingBid;
    //起拍价

    //构造函数
    constructor(string memory _item, uint _biddingTime, uint _startingBid) {
        owner = msg.sender;
        //把部署合约的人设为所有者（拍卖人）
        item = _item;
        //已声明的变量写入函数的参数（拍卖品）
        auctionEndTime = block.timestamp + _biddingTime;
        //拍卖结束时间 = 当前时间 + 拍卖持续时间（拍卖时间）
        startingBid = _startingBid;
        //起拍价
    }

    //出价功能（函数）
    function bid(uint amount) external {

        //筛除垃圾信息
        require(block.timestamp < auctionEndTime, "You're too late.");
        //01 确认拍卖时间
        require(amount > 0, "NO WAY!");
        //02 拒绝出价0或负数
        require(amount > bids[msg.sender], "Someone is higher than that.");
        //03 是否低于当前价
        require(amount >= startingBid, "Too low!");
        //04 是否低于最低出价

        //是否第一次出价
        if (bids[msg.sender] == 0) {
            bidders.push(msg.sender);
            bids[msg.sender] = amount;
        }

        //是否最高价
        if (amount > highestBid) {
            highestBid = amount;
            highestBidder = msg.sender;
        }
    }

    //拍卖结束
    function endAuction() external {
        //拍卖时间是不是到了
        require(block.timestamp >= auctionEndTime, "Auction hasn't ended yet.");
        //是不是已经结束了
        require(!ended, "Auction ended.");
        //顺利的话，可以结束了
        ended = true;
    }

    //拍卖会结果（公开信息）
    function getWinner() external view returns (address, uint) {
        //先看看是不是结束了
        require(ended, "Auction hasn't ended.");
        return (highestBidder, highestBid);
    }

    //查看所有出价者（可选）
    function getAllBidders() external view returns (address[] memory) {
        return bidders;
    }

}