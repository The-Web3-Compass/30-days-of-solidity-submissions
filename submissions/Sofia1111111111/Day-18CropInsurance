// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";
//引入这个接口是为了让我们在合约中调用 Chainlink 的预言机函数，比如 .latestRoundData()。
import "@openzeppelin/contracts/access/Ownable.sol";

contract CropInsurance is Ownable {
    /*接口是一个可以调用其他合约中函数的远程遥控器。要在合约 A 中调用另一个合约 B 的函数，可以按照以下两步操作：
     ① 定义接口：接口可以自己写，也可以通过 import 从外部文件导入。
       接口语法：
       interface 接口名 {
           function 函数名1(...) external view returns (...);
           function 函数名2(...) external returns (...);
}
       注意：
        函数名和目标合约中的函数名一致；
        接口函数必须是 external；
        不写函数体 {}；
        不允许声明状态变量、构造函数。
     ② 使用接口调用目标合约的函数
       function myFunc() public view returns (...) {
          接口名 接口变量 = 接口名(目标合约地址); // 使用接口类型（）将目标合约地址强制转换成接口类型的变量（原本是地址变量）
          return 接口变量.函数名(...);          // 调用远程合约的函数
        } */
    AggregatorV3Interface private weatherOracle;   //接入的是“天气”预言机合约地址，用于调用 latestRoundData() 获取降雨量
    AggregatorV3Interface private ethUsdPriceFeed;  //接入的是“ETH/USD 汇率”预言机地址，用于调用 latestRoundData() 获取ETH价格
    //这两个地址都是外部已部署好的预言机合约地址，在部署自己的合约时要手动传入它们，这些地址可以在 Chainlink 官方文档中查到。
    //constant是常值
    uint256 public constant RAINFALL_THRESHOLD = 500;  //降雨量阈值：500 mm
    uint256 public constant INSURANCE_PREMIUM_USD = 10;  //保险保费：10 USD
    uint256 public constant INSURANCE_PAYOUT_USD = 50;   //理赔金额：50 USD
    //使用映射确定用户是否投保以及用户上一次理赔时间
    mapping(address => bool) public hasInsurance;   //地址映射是否已购买保险
    mapping(address => uint256) public lastClaimTimestamp;  //地址映射上一次申请理赔的时间
    //记录特定事件写入区块链的日志（log）中，以便前端应用或区块浏览器可以监听它们。
    event InsurancePurchased(address indexed farmer, uint256 amount);  //记录用户购买保险的行为：谁买？付了多少钱    用途：前端可以监听这个事件来更新 UI，或后期审计用来追踪资金流。
    event ClaimSubmitted(address indexed farmer);                      //记录用户提交理赔请求的行为：谁提交的？      用途：确认谁发起了请求，配合后续逻辑判断该理赔是否有效。
    event ClaimPaid(address indexed farmer, uint256 amount);           //记录用户成功获得赔偿的事件：谁获赔？获赔多少？   用途：前端可以据此提示“赔付到账”，区块链浏览器也能记录该交易的影响。
    event RainfallChecked(address indexed farmer, uint256 rainfall);   //记录用户查询天气信息的行为：谁查？查到降雨量是多少？   用途：追踪某个地址在某个时间点的天气数据，用于可视化或审计。
    

    /*初始化：将目标合约地址（天气预言机合约地址和汇率预言机地址）强制转换成接口类型的变量；
             将当前部署合约的地址设为管理者*/
    constructor(address _weatherOracle, address _ethUsdPriceFeed) payable Ownable(msg.sender) {  //payable：表示构造函数可以接收ETH并存入当前合约地址
        weatherOracle = AggregatorV3Interface(_weatherOracle);   //接口变量 = 接口名(目标合约地址);
        ethUsdPriceFeed = AggregatorV3Interface(_ethUsdPriceFeed);
    }
    /*所有通过 payable 收到的 ETH，都会进到 address(this) ——也就是合约自己的账户里。
      所有你在代码里通过 .call{value: x}() 等语法发送的 ETH，也都是从 address(this) 扣的。
   💡合约就是一个“账户”，有自己的余额，有自己的收付款能力。*/


    //用户调动函数购买保险
    function purchaseInsurance() external payable {
        uint256 ethPrice = getEthPrice();  //调用getEthPrice()函数，返回当前 ETH 的美元价格，并存入ethPrice中
        uint256 premiumInEth = (INSURANCE_PREMIUM_USD * 1e18) / ethPrice;//把保费（10美元）按当前 ETH 汇率换算成应付的 ETH 金额（单位 wei），用于做比较。
        //NSURANCE_PREMIUM_USD：固定保费（10 美元）；1e18：表示 1 ETH；ethPrice：ETH 的当前美元价格
        //1e18 是一种科学计数法，表示1后有18个0，再比如2.5e6，说明2.5后面有6个0
        require(msg.value >= premiumInEth, "Insufficient premium amount"); //检查实际付款金额msg.value是否符合应付金额premiumInEth
        require(!hasInsurance[msg.sender], "Already insured");  //检查是否投过保了，不可以重复投保

        hasInsurance[msg.sender] = true;  //完成投保
        emit InsurancePurchased(msg.sender, msg.value);  //触发投保成功事件
    }


    //确认是否具有赔款资格：降雨量低于阈值&已投保&一天内只申领一次
    function checkRainfallAndClaim() external {
        require(hasInsurance[msg.sender], "No active insurance");  //检查是否投保
        require(block.timestamp >= lastClaimTimestamp[msg.sender] + 1 days, "Must wait 24h between claims"); //检查用户是否在一天之内重复申请理赔，限制一天只能申领一次
        //+ 1 days：Solidity 允许的时间单位语法（1天 = 86400秒）
        
        (//获取天气数据
            uint80 roundId,  //这一轮数据的编号
            int256 rainfall, //这一轮的降雨量（核心数据） 注意：rainfall 是 int256 类型，稍后会转成 uint256
            ,  //占位，表示不要这个数据 (返回值里我们可以“忽略”不需要的变量（用逗号占位)
            uint256 updatedAt, //这轮数据的时间戳
            uint80 answeredInRound  //数据在哪一轮被确定（用于判断是否过期）
        ) = weatherOracle.latestRoundData();//使用接口函数返回元组参数。weatherOracle：接口变量；latestRoundData：函数名
     
        require(updatedAt > 0, "Round not complete");  //如果数据时间是 0，说明这轮数据还没准备好（比如预言机没更新），那就不允许继续。
        require(answeredInRound >= roundId, "Stale data");  //确认数据是“新鲜”的，没过期

        uint256 currentRainfall = uint256(rainfall);  //转换变量类型：把 int256 转为 uint256（因为不能有负降雨量）
        emit RainfallChecked(msg.sender, currentRainfall);  //触发用户查询降雨量事件，用于前端展示当前天气情况
        
        //进入赔付流程
        if (currentRainfall < RAINFALL_THRESHOLD) {  //判断降雨量是否低于阈值
            lastClaimTimestamp[msg.sender] = block.timestamp;  //若低于阈值，将当前时间戳记录为用户申领时间
            emit ClaimSubmitted(msg.sender);   //触发用户提交理赔行为事件
            uint256 ethPrice = getEthPrice();  //获取当前ETH的美元价格：一个以太币等于多少美元
            uint256 payoutInEth = (INSURANCE_PAYOUT_USD * 1e18) / ethPrice;   //将50美元换算成ETH金额
            //使用.call函数支付赔款
            // msg.sender 在 .call{value: ...} 中不需要手动转换成 payable，因为 .call 是低级调用，它接受任意地址。
            (bool success, ) = msg.sender.call{value: payoutInEth}("");  //给合约地址给用户地址msg.sender支付payoutInEth这样数量的以太币
            require(success, "Transfer failed");   //须返回支付是否成功的答复
            emit ClaimPaid(msg.sender, payoutInEth);  //若成功，触发用户成功获赔事件
        }
    }


    //使用接口调用函数计算以太币的美元价格：获取 1 个以太币（ETH）目前值多少美元（USD）
    //单位是 USD × 1e8
    function getEthPrice() public view returns (uint256) {
        (
            ,
            int256 price,  //只需获取价格（1以太币等于多少美元），这个值之后在其它函数中赋给ethPrice
            ,
            ,
        ) = ethUsdPriceFeed.latestRoundData();  //接口名.目标函数名（）；

        return uint256(price);  //返回价格
    }


    //使用接口调用函数查询当前降雨量
    function getCurrentRainfall() public view returns (uint256) {
        (
            ,
            int256 rainfall,  //只需降雨量
            ,
            ,
        ) = weatherOracle.latestRoundData();  //接口名.目标函数名（）

        return uint256(rainfall); //将变量类型变换再返回降雨量数值
    }


    //管理员对合约地址的余额进行提现
    function withdraw() external onlyOwner {
        payable(owner()).transfer(address(this).balance);  //owner（）来自 OpenZeppelin 的 Ownable 合约，表示当前合约的拥有者地址（通常是部署者）
    }
    /*⚠️ 安全提醒：
    虽然这段代码没问题，但实际开发中更推荐用 call{value: ...} 来替代 .transfer(...)，因为：
    transfer 会自动附带 2300 gas 限制（某些合约地址无法接收）
    新的 EVM gas 规则可能让 transfer 更容易失败
    不过本合约用于教学和 mock 环境，用 .transfer() 也完全没问题。*/

    receive() external payable {}
    /*🚨 如果你不写这个函数会怎样？
        合约仍可以接收 ETH，但只能通过已定义的 payable 函数。
        如果别人直接转 ETH 而不指定函数，交易会失败。
        所以写上 receive() 函数的意义是：
        给合约添加一个“通用收款口”，不管是谁打钱，只要 ETH 能进来就不拒收。
      ⚠️ 注意事项：
        receive() 函数不能带任何参数、不能有返回值
        一个合约只能有 一个 receive() 函数
        如果你还想处理接收到的钱，可以在 {} 里面写逻辑代码（比如记录、事件等）
        
        总结： receive() 	提供一个“默认收款入口”，处理没有函数调用的转账
        比如没有调用函数直接转账给合约地址的代码：send 1 ETH to 0xYourContractAddress*/
    

    //获取合约地址的余额
    function getBalance() public view returns (uint256) {
        return address(this).balance;
    }

}


/*我想问，在具体场景使用中什么情况下会让人不调用任何函数来直接给合约地址转账，以至于合约开发者要考虑到使用receive（）确保收账成功？

ChatGPT 说：
你问得非常到位！🌟
这个问题其实直击了合约设计中一个常被忽略但很重要的点：

💡**“在什么实际场景下，别人会不给我调用函数、而是直接给我的合约地址打钱？”**
👉 这就是我们为什么要写 receive() 函数的真正动因。

✅ 简洁回答：
📌任何“只发送 ETH，不调用函数”的场景，都会触发 receive() 函数。
这种情况在实际 Web3 世界中比你想象得要多。下面我们详细列出几种典型的真实使用场景。

🔹 场景 1：用户用钱包直接转账给合约
💬 比如：用户打开钱包（MetaMask、Rainbow、Trust Wallet 等），手动填写合约地址，输入金额，然后直接点击“发送 ETH”。
         用户没有调用合约的函数，只是打钱，后端合约没有 receive() 函数就会报错

🔹 场景 2：NFT 或 DeFi 项目里的“空投地址”收款
           有些项目会设置一个合约地址专门用来收用户提交的 ETH，然后再批量空投。           
           send 0.05 ETH → 0xProjectAirdropAddress // 用户只需将 ETH 直接转过去，不需要函数调用
           这类收款合约必须有 receive() 才能接收。

🔹 场景 3：外部合约转账（未调用函数）
           有时其他合约会这样给你转账：
           (bool success, ) = targetContract.call{value: 1 ether}("");
           如果 targetContract 里没有 receive()，这笔转账就失败了。

🔹 场景 4：作为钱包用的合约（Smart Wallet）
           比如你写了一个“个人智能钱包”，你希望别人能直接向你的钱包地址打 ETH，哪怕没调用函数。
           这类钱包合约通常都带有 receive() 来保障收款能力。

🔹 场景 5：NFT 铸造合约里用户输错数据
           用户 mint NFT 本应调用：
           mint{value: 0.08 ether}()
           但用户误操作，直接转账到合约地址 0.08 ETH。
           ✅ 如果你合约里写了 receive()，你可以在 receive() 里设置逻辑，比如自动退款或提示信息。

🚨 不写 receive() 会怎样？
情况	                                 结果
用户直接转账	                          ❌ 失败，交易被回退
合约转账给你	                          ❌ 失败，资金丢失或回退
钱包视图显示“无法转账到该地址”	           ❌ 用户体验差，可能造成信任危机

✅ 所以总结一下你的问题：
🔍 为什么需要写 receive()？
因为在现实世界里，“直接打钱到合约地址”是一个真实存在的常见操作，而 Solidity 默认是不允许这种行为的，必须写 receive() 显式允许。*/
