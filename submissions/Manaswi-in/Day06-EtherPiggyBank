//SPDX-License-Identifier:MIT
pragma solidity ^0.8.4;

contract EtherPiggyBank {
    address public bankManager;
    address[] members;
    mapping(address => bool) public registeredMembers;
    mapping(address => uint256) balance;

    constructor() {
        bankManager = msg.sender;
        members.push(msg.sender);
    }

    modifier onlyBankManager() {
        require(bankManager == msg.sender, "Only bank manager perform this action");
        _;
    }

    modifier onlyRegisteredMember() {
        require(registeredMembers[msg.sender] , "Member is not registered");
        _;
        }

    function addMember(address _member) public onlyBankManager {
        require(_member != address(0), "Invalid address" );
        require(_member !=msg.sender, "Bank manager is already a member");
        require(!registeredMembers[_member], "Member is already registered");
        registeredMembers[_member] = true;
        members.push(_member);
    }

    function getMembers() public view returns(address[] memory) {
        return members;
    }

    function depositAmount(uint256 _amount) public  onlyRegisteredMember {
        require(_amount > 0, "Invalid amount");
        balance[msg.sender] += _amount;
    }

    function depositEther(uint256 _amount) public payable onlyRegisteredMember {
        require(_amount > 0, "Invalid amount");
        balance[msg.sender] += msg.value;
    }

    function withdrawAmount(uint256 _amount) public onlyRegisteredMember {
        require(_amount > 0, "Invalid amount");
        require(balance[msg.sender] >= _amount, "Insufficient balance");
        balance[msg.sender] -= _amount;
    }

    function getBalance(address _member) public view returns (uint256) {
        require(_member != address(0), "Address is invalid" ); 
        return balance[_member];
    }

    
}//SPDX-License-Identifier:MIT
pragma solidity ^0.8.4;

contract EtherPiggyBank {
    address public bankManager;
    address[] members;
    mapping(address => bool) public registeredMembers;
    mapping(address => uint256) balance;

    constructor() {
        bankManager = msg.sender;
        members.push(msg.sender);
    }

    modifier onlyBankManager() {
        require(bankManager == msg.sender, "Only bank manager perform this action");
        _;
    }

    modifier onlyRegisteredMember() {
        require(registeredMembers[msg.sender] , "Member is not registered");
        _;
        }

    function addMember(address _member) public onlyBankManager {
        require(_member != address(0), "Invalid address" );
        require(_member !=msg.sender, "Bank manager is already a member");
        require(!registeredMembers[_member], "Member is already registered");
        registeredMembers[_member] = true;
        members.push(_member);
    }

    function getMembers() public view returns(address[] memory) {
        return members;
    }

    function depositAmount(uint256 _amount) public  onlyRegisteredMember {
        require(_amount > 0, "Invalid amount");
        balance[msg.sender] += _amount;
    }

    function depositEther(uint256 _amount) public payable onlyRegisteredMember {
        require(_amount > 0, "Invalid amount");
        balance[msg.sender] += msg.value;
    }

    function withdrawAmount(uint256 _amount) public onlyRegisteredMember {
        require(_amount > 0, "Invalid amount");
        require(balance[msg.sender] >= _amount, "Insufficient balance");
        balance[msg.sender] -= _amount;
    }

    function getBalance(address _member) public view returns (uint256) {
        require(_member != address(0), "Address is invalid" ); 
        return balance[_member];
    }

    
}//SPDX-License-Identifier:MIT
pragma solidity ^0.8.4;

contract EtherPiggyBank {
    address public bankManager;
    address[] members;
    mapping(address => bool) public registeredMembers;
    mapping(address => uint256) balance;

    constructor() {
        bankManager = msg.sender;
        members.push(msg.sender);
    }

    modifier onlyBankManager() {
        require(bankManager == msg.sender, "Only bank manager perform this action");
        _;
    }

    modifier onlyRegisteredMember() {
        require(registeredMembers[msg.sender] , "Member is not registered");
        _;
        }

    function addMember(address _member) public onlyBankManager {
        require(_member != address(0), "Invalid address" );
        require(_member !=msg.sender, "Bank manager is already a member");
        require(!registeredMembers[_member], "Member is already registered");
        registeredMembers[_member] = true;
        members.push(_member);
    }

    function getMembers() public view returns(address[] memory) {
        return members;
    }

    function depositAmount(uint256 _amount) public  onlyRegisteredMember {
        require(_amount > 0, "Invalid amount");
        balance[msg.sender] += _amount;
    }

    function depositEther(uint256 _amount) public payable onlyRegisteredMember {
        require(_amount > 0, "Invalid amount");
        balance[msg.sender] += msg.value;
    }

    function withdrawAmount(uint256 _amount) public onlyRegisteredMember {
        require(_amount > 0, "Invalid amount");
        require(balance[msg.sender] >= _amount, "Insufficient balance");
        balance[msg.sender] -= _amount;
    }

    function getBalance(address _member) public view returns (uint256) {
        require(_member != address(0), "Address is invalid" ); 
        return balance[_member];
    }

    
}
