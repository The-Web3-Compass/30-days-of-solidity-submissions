// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EventEntry {
    string public eventName;
    address public organizer;
    uint256 public eventDate;
    uint256 public maxAttendees;
    uint256 public attendedCount;
    bool public isEventActive;

    mapping(address => bool) public hasAttended;

    event EventCreated(string name, uint256 date, uint256 maxAttendees);
    event AttendeeCheckedIn(address attendee, uint256 timestamp);
    event EventStatusChanged(bool isEventActive);

    constructor(
        string memory _eventName,
        uint256 _eventDate,
        uint256 _maxAttendees
    ) {
        eventName = _eventName;
        organizer = msg.sender;
        eventDate = _eventDate;
        maxAttendees = _maxAttendees;
        isEventActive = true;
        
        emit EventCreated(_eventName, _eventDate, _maxAttendees);
    }

    modifier onlyOrganizer() {
        require(msg.sender == organizer, "Only the organizer can call this function");
        _;
    }

    function setEventStatus(bool _isActive) external onlyOrganizer {
        isEventActive = _isActive;
        emit EventStatusChanged(_isActive);
    }

    function checkIn() external {
        require(isEventActive, "Event is not active");
        require(block.timestamp < eventDate, "Event has already occurred");
        require(!hasAttended[msg.sender], "Already attended");
        require(attendedCount < maxAttendees, "Event is full");
        
        hasAttended[msg.sender] = true;
        attendedCount++;
        
        emit AttendeeCheckedIn(msg.sender, block.timestamp);
    }

    function getMessageHash(address _attendee) public view returns(bytes32) {
        return keccak256(abi.encodePacked(address(this), eventName, _attendee));
    }

    function getEthSignedMessageHash(bytes32 _messageHash) public pure returns(bytes32) {
        return keccak256(
            abi.encodePacked(
                "\x19Ethereum Signed Message:\n32", 
                _messageHash
            )
        );
    }

    function verifySignature(address _attendee, bytes memory _signature) 
        public view returns(bool) 
    {
        bytes32 messageHash = getMessageHash(_attendee);
        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);
        address signer = recoverSigner(ethSignedMessageHash, _signature);
        return signer == organizer;
    }
    
    function recoverSigner(bytes32 ethSignedMessageHash, bytes memory _signature) 
        public pure returns(address) 
    {
        require(_signature.length == 65, "Invalid signature length");
        
        bytes32 r;
        bytes32 s;
        uint8 v;
        
        assembly {
            r := mload(add(_signature, 32))
            s := mload(add(_signature, 64))
            v := byte(0, mload(add(_signature, 96)))
        }
        
        address signer = ecrecover(ethSignedMessageHash, v, r, s);
        
        if (signer == address(0)) {
            return address(0);
        } else {
            return signer;
        }
    }
    
    function checkInWithSignature(bytes memory _signature) external {
        // Infinite gas available for signature-based check-in
        require(isEventActive, "Event not active");
        require(block.timestamp < eventDate, "Event ended");
        require(!hasAttended[msg.sender], "Attendee has already checked in");
        require(attendedCount < maxAttendees, "Max attendees reached");
        require(verifySignature(msg.sender, _signature), "Invalid Signature");

        hasAttended[msg.sender] = true;
        attendedCount++;
        emit AttendeeCheckedIn(msg.sender, block.timestamp);
    }
}
