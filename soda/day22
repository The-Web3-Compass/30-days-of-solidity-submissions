// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;
import "@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol";
import "@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol";

contract DecentralizedLottery is VRFConsumerBaseV2Plus {
    enum LOTTERY_STATE { OPEN, CLOSED, CALCULATING }
    LOTTERY_STATE public lotteryState;
    address payable[] public players;
    address public recentWinner;
    uint256 public entryFee;
    uint256 public subscriptionId;
    bytes32 public keyHash;
    uint32 public callbackGasLimit = 100000;
    uint32 public requestConfirmations = 3;
    uint32 public numWords = 1;
    uint256 public latestRequestId;
    address public owner;

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    constructor(
        address vrfCoordinator,
        uint256 _subscriptionId,
        bytes32 _keyHash,
        uint256 _entryFee
    ) VRFConsumerBaseV2Plus(vrfCoordinator) {
        subscriptionId = _subscriptionId;
        keyHash = _keyHash;
        entryFee = _entryFee;
        lotteryState = LOTTERY_STATE.CLOSED;
        owner = msg.sender;
    }
    
    function enter() public payable {
        require(lotteryState == LOTTERY_STATE.OPEN, "Lottery not open");
        require(msg.value == entryFee, "Insufficient entry fee");
        players.push(payable(msg.sender));
    }
    
    function startLottery() external onlyOwner {
        require(lotteryState == LOTTERY_STATE.CLOSED, "Can't start lottery");
        lotteryState = LOTTERY_STATE.OPEN;
    }
    
    function endLottery() external onlyOwner {
        require(lotteryState == LOTTERY_STATE.OPEN, "Can't end lottery");
        lotteryState = LOTTERY_STATE.CALCULATING;
        
        VRFV2PlusClient.RandomWordsRequest memory req = VRFV2PlusClient.RandomWordsRequest({
            keyHash: keyHash,
            subId: subscriptionId,
            requestConfirmations: requestConfirmations,
            callbackGasLimit: callbackGasLimit,
            numWords: numWords,
            extraArgs: VRFV2PlusClient._argsToBytes(VRFV2PlusClient.ExtraArgsV1({nativePayment: true}))
        });
        
        latestRequestId = s_vrfCoordinator.requestRandomWords(req);
    }
    
    function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal override {
        require(lotteryState == LOTTERY_STATE.CALCULATING, "Not in calculating state");
        require(requestId == latestRequestId, "Invalid request ID");
        
        uint256 index = randomWords[0] % players.length;
        recentWinner = players[index];
        payable(recentWinner).transfer(address(this).balance);
        
        players = new address payable[](0);
        lotteryState = LOTTERY_STATE.CLOSED;
    }
    
    function getNumberOfPlayers() public view returns (uint256) {
        return players.length;
    }
    
    function getBalance() public view returns (uint256) {
        return address(this).balance;
    }
}

contract Lottery {
    enum LOTTERY_STATE { OPEN, CLOSED, CALCULATING }
    
    LOTTERY_STATE public lotteryState;
    address payable[] public players;
    address public recentWinner;

    function fulfillRandomWords(uint256, uint256[] calldata randomWords) internal {
        require(lotteryState == LOTTERY_STATE.CALCULATING, "NOT READY TO pick winner");
        uint256 winnerIndex = randomWords[0] % players.length;
        recentWinner = players[winnerIndex];
        players = new address payable[](0);
        lotteryState = LOTTERY_STATE.CLOSED;
        
        (bool success, ) = recentWinner.call{value: address(this).balance}("");
        require(success, "Failed to send ETH to winner");
    }

    function getPlayers() external view returns(address payable[] memory) {
        return players;
    }
}
