// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract CropInsurance is Ownable {
    AggregatorV3Interface private weatherOracle;
    AggregatorV3Interface private ethUsdPriceFeed;

    uint256 public constant RAINFALL_THRESHOLD = 500;
    uint256 public constant INSURANCE_PREMIUM_USD = 10 * 1e18; // 10 USD in wei units
    uint256 public constant INSURANCE_PAYOUT_USD = 100 * 1e18; // 100 USD in wei units

    mapping(address => bool) public hasInsurance;
    mapping(address => uint256) public lastClaimTimestamp;
    

    address[] private insuredFarmers;
    mapping(address => bool) private isInsured;

    event InsurancePurchased(address indexed farmer, uint256 amount);
    event ClaimSubmitted(address indexed farmer);
    event ClaimFailed(address indexed farmer, uint256 amount);
    event RainfallChecked(address indexed farmer, uint256 rainfall);

    constructor(address _weatherOracle, address _ethUsdPriceFeed) {
        weatherOracle = AggregatorV3Interface(_weatherOracle);
        ethUsdPriceFeed = AggregatorV3Interface(_ethUsdPriceFeed);
    }

    function purchaseInsurance() external payable {
        uint256 ethPrice = getEthPrice();
        uint256 premiumInEth = (INSURANCE_PREMIUM_USD * 1e18) / ethPrice;

        require(msg.value >= premiumInEth, "Insufficient Amount");
        require(!hasInsurance[msg.sender], "Already Insured");

        hasInsurance[msg.sender] = true;
        
        if (!isInsured[msg.sender]) {
            insuredFarmers.push(msg.sender);
            isInsured[msg.sender] = true;
        }
        
        emit InsurancePurchased(msg.sender, msg.value);
    }

    function checkRainfallAndClaim() external {
        require(hasInsurance[msg.sender], "No active insurance");
        require(
            block.timestamp >= lastClaimTimestamp[msg.sender] + 1 days, 
            "Must wait 24h between claims"
        );
        
        (uint80 roundId, int256 rainfall, , uint256 updatedAt, uint80 answeredInRound) = 
            weatherOracle.latestRoundData();
        
        require(updatedAt != 0, "Round not complete");
        require(answeredInRound == roundId, "Stale data");
        
        uint256 currentRainfall = uint256(rainfall);
        emit RainfallChecked(msg.sender, currentRainfall);


        uint256 ethPrice = getEthPrice();
        uint256 payoutInEth = (INSURANCE_PAYOUT_USD * 1e18) / ethPrice;
        
        require(address(this).balance >= payoutInEth, "Insufficient contract balance");
        
       
        lastClaimTimestamp[msg.sender] = block.timestamp;
        
        if (currentRainfall >= RAINFALL_THRESHOLD) {
            payable(msg.sender).transfer(payoutInEth);
            emit ClaimSubmitted(msg.sender);
        } else {
            emit ClaimFailed(msg.sender, payoutInEth);
        }
    }

    function getCurrentRainfall() public view returns (uint256) {
        (, int256 rainfall, , , ) = weatherOracle.latestRoundData();
        return uint256(rainfall);
    }

    function getEthPrice() public view returns (uint256) {
        (, int256 price, , , ) = ethUsdPriceFeed.latestRoundData();
        require(price > 0, "Invalid price feed");
        return uint256(price);
    }

    function getAllInsuranceFarmers() external view returns (address[] memory) {
        address[] memory activeFarmers = new address[](insuredFarmers.length);
        uint256 count = 0;
        
        for (uint256 i = 0; i < insuredFarmers.length; i++) {
            if (hasInsurance[insuredFarmers[i]]) {
                activeFarmers[count] = insuredFarmers[i];
                count++;
            }
        }
      
        address[] memory result = new address[](count);
        for (uint256 i = 0; i < count; i++) {
            result[i] = activeFarmers[i];
        }
        
        return result;
    }

    function withdraw() external onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }
    

    receive() external payable {}
}
