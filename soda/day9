//SPDX-License-Identifier:MIT

pragma solidity ^0.8.0;

import "./ScientificCalculator.sol";

contract Calculator{

    address public owner;
    address public ScientificCalculatorAddress;

    constructor(){
        owner = msg.sender;
    }

    modifier onlyOwner(){
        require(msg.sender == owner,"Only owner can do this action");
        _;
    }

    function setScientificCalculator(address _address) external onlyOwner{
        scientificCalculatorAddress = _address;
    }

    function add(uint256 ba, uint256 b) public pure returns(uint256){
        uint256 result = a+b;
        return result;
    }

    function multiply (uint256 a, uint256 b) public pure returns (uint256){
        uint256 result = a*b;
        return result;
    }

    function divide(uint256 a ,uint256 b) public pure returns(uint256){
        uint256 result = a/b;
        return result;
    }

    function calculatePower(uint256 base,uint256 exponent)public view returns(uint256){
    ScientificCalculator scientificCalc = ScientificCalculator(ScientificCalculatorAddress);

    //external call
    uint256 result = scientificCalc.power(base,exponent);

    return result;

    }

    function calculateSquareRoot(uint256 number) public returns (uint256){
        require(number >=0,"Cannot calculate square root of negative number");
        bytes memory data = abi.encodeWithSignature("SquareRoot(int256)",number);
        (bool success, bytes memory returnData) = scientificCalculatorAddress.call(data);
        require(success,"External call failed");
        uint256 result = abi.decode(returnData,(uint256));
        return result;
    }
}
